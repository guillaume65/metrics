# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

[[inputs.mqtt_consumer]]
  ## Broker URLs for the MQTT server or cluster.  To connect to multiple
  ## clusters or standalone servers, use a seperate plugin instance.
  ##   example: servers = ["tcp://localhost:1883"]
  ##            servers = ["ssl://localhost:1883"]
  ##            servers = ["ws://localhost:1883"]
  servers = ["tcp://127.0.0.1:1883"]

  ## Topics that will be subscribed to.
  topics = [
    "telegraf/host01/cpu",
    "telegraf/+/mem",
    "sensors/#",
  ]
  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"

# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
   servers = ["mqtt://mqtt:1883"]
   qos = 2
   topics = [
     "events/central_heating/otmonitor/boilerwatertemperature",
     "events/central_heating/otmonitor/returnwatertemperature",
     "events/central_heating/otmonitor/controlsetpoint",
     "events/central_heating/otmonitor/roomtemperature",
     "events/central_heating/otmonitor/modulation",
     "events/central_heating/otmonitor/chsetpoint",
     "events/central_heating/otmonitor/setpoint",
   ]
name_override = "OTV"
data_format = "value"
data_type = "float"
 
# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
   servers = ["mqtt://mqtt:1883"]
   qos = 2
   topics = [
     "events/central_heating/otmonitor/flame",
     "events/central_heating/otmonitor/hotwater",
     "events/central_heating/otmonitor/centralheating",
     "events/central_heating/otmonitor/thermostat",
     "events/central_heating/otmonitor/chenable",
     "events/central_heating/otmonitor/dhwenable",
     "events/central_heating/otmonitor/fault",
   ]
name_override = "OTB"
data_format = "value"
data_type = "boolean"
 
# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
   servers = ["mqtt://mqtt:1883"]
   qos = 2
   topics = [
     "events/central_heating/otmonitor/flame",
     "events/central_heating/otmonitor/hotwater",
     "events/central_heating/otmonitor/centralheating",
     "events/central_heating/otmonitor/thermostat",
     "events/central_heating/otmonitor/chenable",
     "events/central_heating/otmonitor/dhwenable",
     "events/central_heating/otmonitor/fault",
   ]
name_override = "OTI"
data_format = "value"
data_type = "integer"

# The message topic will be stored in a tag specified by this value.  If set
# to the empty string no topic tag will be created.
topic_tag = "otgw_topic"

# Configuration for sending metrics to InfluxDB 2.0

[[outputs.influxdb_v2]]
# The URLs of the InfluxDB cluster nodes.
#
# Multiple URLs can be specified for a single cluster, only ONE of the
# urls will be written to each interval.
# urls exp: http://127.0.0.1:8086
urls = ["http://127.0.0.1:8086"]

# Token for authentication.
token = "nG1DS8P-smm85AGWvk7cZo9BNUPqvxDc5klQA1lTE_ptamjKQj9A-OD4iUZOVJBhF25THZoSQYPoicoGoFOLzg=="

# Organization is the name of the organization you wish to write to; must exist.
organization = "verheij.local"

# Destination bucket to write into.
bucket = "otgw"